The configuration for this scenario includes a virtual private cloud (VPC) with a public subnet and a private subnet. 
We recommend this scenario if you want to run a public-facing web application, while maintaining back-end servers that aren't publicly accessible. 
A common example is a multi-tier website, with the web servers in a public subnet and the database servers in a private subnet. 
You can set up security and routing so that the web servers can communicate with the database servers.

The instances in the public subnet can send outbound traffic directly to the internet, whereas the instances in the private subnet can't. Instead, 
the instances in the private subnet can access the internet by using a network address translation (NAT) gateway that resides in the public subnet.
The database servers can connect to the internet for software updates using the NAT gateway, 
but the internet cannot establish connections to the database servers.


The configuration for this scenario includes the following:

    A VPC with a size /16 IPv4 CIDR block (example: 10.0.0.0/16). This provides 65,536 private IPv4 addresses.

    A public subnet with a size /24 IPv4 CIDR block (example: 10.0.0.0/24). This provides 256 private IPv4 addresses. A public subnet is a subnet that's associated with a route table that has a route to an internet gateway.

    A private subnet with a size /24 IPv4 CIDR block (example: 10.0.1.0/24). This provides 256 private IPv4 addresses.

    An internet gateway. This connects the VPC to the internet and to other AWS services.

    Instances with private IPv4 addresses in the subnet range (examples: 10.0.0.5, 10.0.1.5). This enables them to communicate with each other and other instances in the VPC.

    Instances in the public subnet with Elastic IPv4 addresses (example: 198.51.100.1), which are public IPv4 addresses that enable them to be reached from the internet. The instances can have public IP addresses assigned at launch instead of Elastic IP addresses. Instances in the private subnet are back-end servers that don't need to accept incoming traffic from the internet and therefore do not have public IP addresses; however, they can send requests to the internet using the NAT gateway (see the next bullet).

    A NAT gateway with its own Elastic IPv4 address. Instances in the private subnet can send requests to the internet through the NAT gateway over IPv4 (for example, for software updates).

    A custom route table associated with the public subnet. This route table contains an entry that enables instances in the subnet to communicate with other instances in the VPC over IPv4, and an entry that enables instances in the subnet to communicate directly with the internet over IPv4.

    The main route table associated with the private subnet. The route table contains an entry that enables instances in the subnet to communicate with other instances in the VPC over IPv4, and an entry that enables instances in the subnet to communicate with the internet through the NAT gateway over IPv4.


Routing

In this scenario, Amazon VPC updates the main route table used with the private subnet,and creates a custom route table and associates 
it with the public subnet.In this scenario, all traffic from each subnet that is bound for AWS (for example, 
to the Amazon EC2 or Amazon S3 endpoints) goes over the internet gateway. The database servers in the private subnet can't receive traffic from the internet directly because they don't have Elastic IP addresses. 
However, the database servers can send and receive internet traffic through the NAT device in the public subnet. Any additional subnets that you create use the main route table by default, 
which means that they are private subnets by default.If you want to make a subnet public, you can always change the route table that it's associated with.

Main route table

The main route table is associated with the private subnet. The first entry is the default entry for local routing in the VPC; 
this entry enables the instances in the VPC to communicate with each other. 
The second entry sends all other subnet traffic to the NAT gateway (for example, nat-12345678901234567).

Custom route table

The custom route table is associated with the public subnet. The first entry is the default entry for local routing in the VPC; 
this entry enables the instances in this VPC to communicate with each other. 
The second entry routes all other subnet traffic to the internet over the internet gateway (for example, igw-1a2b3d4d).

Security

For this scenario, you'll use security groups but not network ACLs. 
For this scenario, we recommend that you create the following security groups instead of using the default security group:

    WebServerSG: Specify this security group when you launch the web servers in the public subnet.

    DBServerSG: Specify this security group when you launch the database servers in the private subnet.
    
The instances assigned to a security group can be in different subnets. However, 
in this scenario, each security group corresponds to the type of role an instance plays, and each role requires the instance to be in a particular subnet. Therefore, i
n this scenario, all instances assigned to a security group are in the same subnet.

WebserverSG Security Group

WebServerSG security group, which allow the web servers to receive internet traffic, 
as well as SSH and RDP traffic from your network. The web servers can also initiate 
read and write requests to the database servers in the private subnet, and send traffic to the internet; for example, 
to get software updates. Because the web server doesn't initiate any other outbound communication, the default outbound rule is removed.

DBServerSG security group

which allow read or write database requests from the web servers. 
The database servers can also initiate traffic bound for the internet (the route table sends that traffic to the NAT gateway, 
which then forwards it to the internet over the internet gateway).

Implement this scenario

You can use Amazon VPC to create the VPC, subnets, NAT gateway, and optionally, 
an egress-only internet gateway. You must specify an Elastic IP address for your NAT gateway; 
if you don't have one, you must first allocate one to your account. If you want to use an existing Elastic IP address, 
ensure that it's not currently associated with another instance or network interface. 
The NAT gateway is automatically created in the public subnet of your VPC.










